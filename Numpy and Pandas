{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOxFVHGmdSW/GI09AYfUSKG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UzairRan/Exploratory_Data_Analysis/blob/main/Numpy%20and%20Pandas\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Operations  using Numpy\n"
      ],
      "metadata": {
        "id": "sUw3NX9UFvJN"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "num1d = [1,2,3,4,5]\n",
        "num2d = [1,2,3,4,5], [\"hello\", \"pti\"]\n",
        "num1d = np.array(num1d)\n",
        "num2d = np.array(num2d)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxoDUxdF6eUX",
        "outputId": "04c2efa3-3e45-4293-9f51-184edda49e22"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-7bc74d6172c8>:5: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  num2d = np.array(num2d)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np_mat = np.eye(4)\n",
        "np_mat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gziv8U5-7LK_",
        "outputId": "fb84e50b-1fb3-48bc-bd4c-33bd72b28226"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0.],\n",
              "       [0., 1., 0., 0.],\n",
              "       [0., 0., 1., 0.],\n",
              "       [0., 0., 0., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# printing random numbers using numpy\n",
        "np_random = np.random.randint(0,100,100)\n",
        "np_random"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xitLvfBm7jD2",
        "outputId": "6228f3d4-766c-4719-f59e-b0a727ecbb78"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([53, 67, 81, 25, 96, 76, 73, 39, 65, 44, 46, 85, 63, 87, 45, 96, 95,\n",
              "       98, 43, 98, 43, 50, 47,  4,  0, 61, 21, 24, 14, 75, 28, 30, 27, 82,\n",
              "       82, 95, 50, 78, 97,  1, 81, 30, 36, 95,  6, 16, 55, 51, 23, 44, 22,\n",
              "       30,  2, 78, 62, 38, 67, 77, 51, 40, 57, 74, 89, 92, 89, 97, 63, 88,\n",
              "       54, 87, 74, 39, 39, 31, 36, 58, 55, 58, 67, 38, 47, 41, 62, 12, 47,\n",
              "        3, 46, 72, 96, 73, 20, 85, 70, 84, 11,  0,  1, 27, 84, 91])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# printing last element in an array\n",
        "names = np.array([\"uzair\", \"umair\", \"ahmad\"])\n",
        "print(\"\\n last element of array is:\", names[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IW0mgD8w8Cak",
        "outputId": "21111e0b-efa6-4772-d94e-5a7960bc57ac"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " last element of array is: ahmad\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print specific index in multi dimensional array\n",
        "numbers = np.array([[1,2,3],[10,11,12],[24,25,26]])\n",
        "print(\"Second Row, Third Element:\", numbers[1][2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z5K6tYqy81dI",
        "outputId": "99e657f7-561a-4c83-b098-fa1a3debce30"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Second Row, Third Element: 12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Inserting elements into array and reshape it\n",
        "numbers = np.arange(1,26).reshape(5,5)\n",
        "print(\"Numbers inserted \\n\\n\", numbers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CHUPBfqn9sYu",
        "outputId": "d7d104cd-167c-4ce5-efad-9e0dd876c6bf"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Numbers inserted \n",
            "\n",
            " [[ 1  2  3  4  5]\n",
            " [ 6  7  8  9 10]\n",
            " [11 12 13 14 15]\n",
            " [16 17 18 19 20]\n",
            " [21 22 23 24 25]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replacing even numbers with a common value\n",
        "numbers = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n",
        "numbers[numbers%2 == 0] = 10\n",
        "print(numbers)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_DAiVpqB-JiN",
        "outputId": "af7642a9-707e-4c98-bf3b-626423b87cb7"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10  1 10  3 10  5 10  7 10  9 10 11 10 13 10 15]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting 1D  array into 2D array\n",
        "numbers = np.arange(10)\n",
        "print(numbers)\n",
        "print(\"Reshaped into 2 dimensions:\\n\")\n",
        "numbers.reshape(2, -1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PnUwKmgM_Nh-",
        "outputId": "87895f0f-1942-480b-ed50-a824661baa08"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 3 4 5 6 7 8 9]\n",
            "Reshaped into 2 dimensions:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 1, 2, 3, 4],\n",
              "       [5, 6, 7, 8, 9]])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# printing common elements from two numpy arrays\n",
        "x = np.array([12,13,14,15,16])\n",
        "y = np.array([1,13,15,76,16])\n",
        "np.intersect1d(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vIfikZXY_02t",
        "outputId": "1f923e74-c0ad-451a-c39c-09c2a78ccb20"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([13, 15, 16])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print custom range values in an array\n",
        "numbers = np.arange(10)\n",
        "print(numbers)\n",
        "numbers[(numbers >= 3) & (numbers <= 6)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eEXvaiDYFNWQ",
        "outputId": "309a04f7-92eb-4c7d-ce71-ccc6b7ff2ad1"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 3 4 5 6 7 8 9]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3, 4, 5, 6])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Operations using pandas "
      ],
      "metadata": {
        "id": "UaNWtMlSF93z"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Creation of series using dictionaries in pandas\n",
        "import pandas as pd\n",
        "sample_dict = {\"x\":1,\"y\":2,\"z\":3}\n",
        "the_series = pd.Series(sample_dict)\n",
        "print(the_series)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V4i6v1y6GEQj",
        "outputId": "33e5f4eb-8c48-436c-d5af-3b86302a0d39"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x    1\n",
            "y    2\n",
            "z    3\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assigning a name to an index in pandas\n",
        "sample_series = pd.Series(list('123456789'))\n",
        "sample_series.name = 'numbers'\n",
        "sample_series.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BTYAM4S6HFhF",
        "outputId": "98d835f7-9efe-4af9-fc6e-094f6f9e3499"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1\n",
              "1    2\n",
              "2    3\n",
              "3    4\n",
              "4    5\n",
              "Name: numbers, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# printing unique elements in two series\n",
        "first_series = pd.Series([1,2,3,4,5])\n",
        "second_series = pd.Series([6,7,8,9,4])\n",
        "first_series[~first_series.isin(second_series)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-WJ_-crjIHzy",
        "outputId": "93f35cf3-b2e1-425f-ab2c-12619b9b5923"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1\n",
              "1    2\n",
              "2    3\n",
              "4    5\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Numpy array to pandas Dataframe conversion\n",
        "sample_series = pd.Series(np.random.randint(1,20,25))\n",
        "data_frame = pd.DataFrame(sample_series.values.reshape(5,5))\n",
        "print(data_frame)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VbWXqtFeI1p1",
        "outputId": "ecfecd21-ff23-464a-951a-c3588c63455d"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    0   1   2   3   4\n",
            "0   9  19   8  19  17\n",
            "1   3   6  19  14   8\n",
            "2   1   1   2  19  16\n",
            "3  19  13   4  17   1\n",
            "4   5   3  14  11   2\n"
          ]
        }
      ]
    }
  ]
}